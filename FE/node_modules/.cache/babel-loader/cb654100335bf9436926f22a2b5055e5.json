{"ast":null,"code":"var _jsxFileName = \"/Users/samueldias/Desktop/MyProjectMindera/src/homepage/Components/Register.jsx\";\nimport React, { useState } from \"react\";\nimport { Jumbotron, Container, Image, Alert } from \"react-bootstrap\";\nimport styles from \"../CSS/Register.module.css\";\nimport code from \"../../commons/Assets/imagemLogo.png\";\nexport default function Register() {\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [avatarName, setAvatarName] = useState(\"\");\n  const [photo, setPhoto] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [hasSubmissionSucceed, setHasSubmissionSucceed] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleSubmit = async evt => {\n    evt.preventDefault();\n\n    if (name && password && email && avatarName) {\n      try {\n        const resp__raw = await fetch(\"http://localhost:8080/users\", {\n          origin: \"*\",\n          method: \"POST\",\n          body: JSON.stringify({\n            username: `${name}`,\n            password: `${password}`,\n            email: `${email}`,\n            avatarName: `${avatarName}`,\n            photo: `${photo}`,\n            description: `${description}`\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n\n        if (!resp__raw.ok) {\n          setError(true);\n          setHasSubmissionSucceed(false);\n          resp__raw.text().then(text => {\n            setErrorMessage(JSON.parse(text).message);\n          });\n        } else {\n          setHasSubmissionSucceed(true);\n          setError(false);\n          document.querySelectorAll(\"input\").forEach(input => input.value !== \"Submit\" ? input.value = \"\" : input.value = \"Submit\");\n          setName(\"\");\n          setPassword(\"\");\n          setEmail(\"\");\n          setAvatarName(\"\");\n          setPhoto(\"\");\n          setDescription(\"\");\n        }\n      } catch (err) {\n        setError(true);\n        setErrorMessage(\"Error Creating Account\");\n      }\n    } else {\n      setError(true);\n      setErrorMessage(\"Error Creating Account\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    id: \"about\",\n    className: styles.Jumbotron,\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.Us,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, \"Register\"), /*#__PURE__*/React.createElement(Image, {\n    src: code,\n    alt: \"Logo\",\n    style: {\n      maxHeight: \"36px\",\n      alignSelf: \"center\",\n      marginLeft: \"10px\",\n      paddingBottom: \"4px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  })), hasSubmissionSucceed && /*#__PURE__*/React.createElement(Alert, {\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, \"Successfully\"), error && /*#__PURE__*/React.createElement(Alert, {\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, errorMessage), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: styles.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Username:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    required: \"required\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Password:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    required: \"required\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"Email:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    value: email,\n    required: \"required\",\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"Avatar Name:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    required: \"required\",\n    value: avatarName,\n    onChange: e => setAvatarName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Photo:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: photo,\n    onChange: e => setPhoto(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"upload\",\n    type: \"file\",\n    accept: \"image/*\",\n    onChange: event => {\n      var myHeaders = new Headers();\n      myHeaders.append(\"Authorization\", \"Client-ID eae95290510293a\");\n      var formdata = new FormData();\n      formdata.append(\"image\", event.target.files[0]);\n      var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: formdata,\n        redirect: 'follow'\n      };\n      fetch(\"https://api.imgur.com/3/image\", requestOptions).then(response => response.json()).then(result => setPhoto(result.data.link)).catch(error => console.log('error', error));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, \"Description:\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: styles.description,\n    type: \"text\",\n    value: description,\n    onChange: e => setDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: styles.buttonSubmit,\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.lineGrade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/samueldias/Desktop/MyProjectMindera/src/homepage/Components/Register.jsx"],"names":["React","useState","Jumbotron","Container","Image","Alert","styles","code","Register","name","setName","password","setPassword","email","setEmail","avatarName","setAvatarName","photo","setPhoto","description","setDescription","hasSubmissionSucceed","setHasSubmissionSucceed","error","setError","errorMessage","setErrorMessage","handleSubmit","evt","preventDefault","resp__raw","fetch","origin","method","body","JSON","stringify","username","headers","ok","text","then","parse","message","document","querySelectorAll","forEach","input","value","err","card","heading","Us","maxHeight","alignSelf","marginLeft","paddingBottom","form","e","target","event","myHeaders","Headers","append","formdata","FormData","files","requestOptions","redirect","response","json","result","data","link","catch","console","log","buttonSubmit","lineGrade"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Jumbotron, Container, Image, Alert } from \"react-bootstrap\";\nimport styles from \"../CSS/Register.module.css\";\nimport code from \"../../commons/Assets/imagemLogo.png\";\n\nexport default function Register() {\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [avatarName, setAvatarName] = useState(\"\");\n  const [photo, setPhoto] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [hasSubmissionSucceed, setHasSubmissionSucceed] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n\n    if (name && password && email && avatarName) {\n      try {\n        const resp__raw = await fetch(\"http://localhost:8080/users\", {\n          origin: \"*\",\n          method: \"POST\",\n          body: JSON.stringify({\n            username: `${name}`,\n            password: `${password}`,\n            email: `${email}`,\n            avatarName: `${avatarName}`,\n            photo: `${photo}`,\n            description: `${description}`\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n\n        if (!resp__raw.ok) {\n          setError(true)\n          setHasSubmissionSucceed(false)\n          resp__raw.text().then(text => { setErrorMessage(JSON.parse(text).message) })\n        } else {\n          setHasSubmissionSucceed(true)\n          setError(false)\n          document.querySelectorAll(\"input\").forEach(\n            input => (\n              input.value !== \"Submit\" ? input.value = \"\" : input.value = \"Submit\")\n          );\n          setName(\"\");\n          setPassword(\"\");\n          setEmail(\"\");\n          setAvatarName(\"\");\n          setPhoto(\"\");\n          setDescription(\"\");\n        }\n      } catch (err) {\n        setError(true)\n        setErrorMessage(\"Error Creating Account\")\n      }\n    } else {\n      setError(true)\n      setErrorMessage(\"Error Creating Account\")\n    }\n\n\n  }\n\n\n  return (\n    <Jumbotron id=\"about\" className={styles.Jumbotron} fluid>\n      <Container>\n        <div className={styles.card}>\n          <h1 className={styles.heading}>\n            <span className={styles.Us}>Register</span>\n            <Image src={code} alt=\"Logo\" style={{ maxHeight: \"36px\", alignSelf: \"center\", marginLeft: \"10px\", paddingBottom: \"4px\" }} />\n          </h1>\n          {hasSubmissionSucceed && (\n            <Alert variant=\"success\">\n              Successfully\n            </Alert>\n          )}\n\n          {error && (\n            <Alert variant=\"danger\">{errorMessage}</Alert>\n          )}\n          <form onSubmit={handleSubmit} className={styles.form}>\n            <label>Username:</label>\n            <input\n              type=\"text\"\n              required=\"required\"\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n\n            <label>Password:</label>\n            <input\n              type=\"password\"\n              required=\"required\"\n              value={password}\n              onChange={e => setPassword(e.target.value)}\n            />\n\n            <label>Email:</label>\n            <input\n              type=\"email\"\n              value={email}\n              required=\"required\"\n              onChange={e => setEmail(e.target.value)}\n            />\n\n            <label>\n              Avatar Name:\n              </label>\n            <input\n              type=\"text\"\n              required=\"required\"\n              value={avatarName}\n              onChange={e => setAvatarName(e.target.value)}\n            />\n\n            <label>Photo:</label>\n            <input\n              type=\"text\"\n              value={photo}\n              onChange={e => setPhoto(e.target.value)}\n            />\n\n            <input id=\"upload\" type=\"file\" accept=\"image/*\"\n              onChange={(event) => {\n                var myHeaders = new Headers();\n                myHeaders.append(\"Authorization\", \"Client-ID eae95290510293a\");\n                \n                var formdata = new FormData();\n                formdata.append(\"image\", event.target.files[0]);\n                \n                var requestOptions = {\n                  method: 'POST',\n                  headers: myHeaders,\n                  body: formdata,\n                  redirect: 'follow'\n                };\n                \n                fetch(\"https://api.imgur.com/3/image\", requestOptions)\n                  .then(response => response.json())\n                  .then(result => setPhoto(result.data.link))\n                  .catch(error => console.log('error', error));\n              }}\n            />\n\n            <label>Description:</label>\n            <textarea\n              className={styles.description}\n              type=\"text\"\n              value={description}\n              onChange={e => setDescription(e.target.value)}\n            />\n\n            <input className={styles.buttonSubmit} type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n      </Container>\n      <div className={styles.lineGrade} ></div>\n    </Jumbotron>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}