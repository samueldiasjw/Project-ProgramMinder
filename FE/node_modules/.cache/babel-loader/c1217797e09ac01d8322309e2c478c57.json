{"ast":null,"code":"var _jsxFileName = \"/Users/samueldias/Desktop/MyProjectMindera/src/homepage/Components/Register.js\";\nimport React, { useState } from \"react\";\nimport { Jumbotron, Container, Image, Alert } from \"react-bootstrap\";\nimport styles from \"../CSS/Register.module.css\";\nimport code from \"../../commons/Assets/imagemLogo.png\";\nexport default function AboutUs({\n  id\n}) {\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [avatarName, setAvatarName] = useState(\"\");\n  const [photo, setPhoto] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [hasSubmissionSucceed, setHasSubmissionSucceed] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const handleSubmit = async evt => {\n    evt.preventDefault();\n\n    try {\n      const resp__raw = await fetch(\"http://localhost:8080/users\", {\n        origin: \"*\",\n        method: \"POST\",\n        body: JSON.stringify({\n          username: `${name}`,\n          password: `${password}`,\n          email: `${email}`,\n          avatarName: `${avatarName}`,\n          photo: `${photo}`,\n          description: `${description}`\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      if (!resp__raw.ok) {\n        setError(true);\n        setErrorMessage(\"Error Creating Account\");\n        resp__raw.text().then(text => {\n          setErrorMessage(JSON.parse(text).message);\n        });\n        setHasSubmissionSucceed(false);\n      } else {\n        setHasSubmissionSucceed(true);\n        setError(false);\n      }\n    } catch (err) {\n      setError(true);\n      setErrorMessage(\"Error Creating Account\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    id: \"about\",\n    className: styles.Jumbotron,\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.Us,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, \"Register\"), /*#__PURE__*/React.createElement(Image, {\n    src: code,\n    alt: \"Logo\",\n    style: {\n      maxHeight: \"36px\",\n      alignSelf: \"center\",\n      marginLeft: \"10px\",\n      paddingBottom: \"4px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  })), hasSubmissionSucceed && /*#__PURE__*/React.createElement(Alert, {\n    variant: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"Successfully\"), error && /*#__PURE__*/React.createElement(Alert, {\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, errorMessage), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    className: styles.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \"Username:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    required: \"required\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Password:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"password\",\n    required: \"required\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Email:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"email\",\n    value: email,\n    required: \"required\",\n    onChange: e => setEmail(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Avatar Name:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: avatarName,\n    onChange: e => setAvatarName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, \"Photo:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: photo,\n    onChange: e => setPhoto(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"Description:\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: description,\n    onChange: e => setDescription(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: styles.buttonSubmit,\n    type: \"submit\",\n    value: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.lineGrade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/samueldias/Desktop/MyProjectMindera/src/homepage/Components/Register.js"],"names":["React","useState","Jumbotron","Container","Image","Alert","styles","code","AboutUs","id","name","setName","password","setPassword","email","setEmail","avatarName","setAvatarName","photo","setPhoto","description","setDescription","hasSubmissionSucceed","setHasSubmissionSucceed","error","setError","errorMessage","setErrorMessage","handleSubmit","evt","preventDefault","resp__raw","fetch","origin","method","body","JSON","stringify","username","headers","ok","text","then","parse","message","err","card","heading","Us","maxHeight","alignSelf","marginLeft","paddingBottom","form","e","target","value","buttonSubmit","lineGrade"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Jumbotron, Container, Image, Alert } from \"react-bootstrap\";\nimport styles from \"../CSS/Register.module.css\";\nimport code from \"../../commons/Assets/imagemLogo.png\";\n\nexport default function AboutUs({ id }) {\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [avatarName, setAvatarName] = useState(\"\");\n  const [photo, setPhoto] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [hasSubmissionSucceed, setHasSubmissionSucceed] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  \n  const handleSubmit = async (evt) => {\n      evt.preventDefault();\n\n      try {\n        const resp__raw = await fetch(\"http://localhost:8080/users\", {\n          origin: \"*\",\n          method: \"POST\",\n          body: JSON.stringify({\n            username: `${name}`,\n            password: `${password}`,\n            email: `${email}`,\n            avatarName: `${avatarName}`,\n            photo: `${photo}`,\n            description: `${description}`\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n\n\n        if(!resp__raw.ok){\n          setError(true)\n          setErrorMessage(\"Error Creating Account\")\n          resp__raw.text().then(text => {setErrorMessage(JSON.parse(text).message)})\n          setHasSubmissionSucceed(false)\n        } else{\n          setHasSubmissionSucceed(true)\n          setError(false)\n        }\n      } catch (err) {\n        setError(true)\n        setErrorMessage(\"Error Creating Account\")\n      } \n  }\n\n\n  return (\n    <Jumbotron id=\"about\" className={styles.Jumbotron} fluid>\n      <Container>\n        <div className={styles.card}>\n          <h1 className={styles.heading}>\n            <span className={styles.Us}>Register</span>\n            <Image src={code} alt=\"Logo\" style={{ maxHeight: \"36px\", alignSelf: \"center\", marginLeft: \"10px\", paddingBottom: \"4px\"  }} />\n          </h1>\n              {hasSubmissionSucceed && (\n                <Alert variant=\"success\">\n                  Successfully\n                </Alert>\n              )}\n\n              {error && (\n                <Alert variant=\"danger\">{errorMessage}</Alert>\n              )}\n          <form onSubmit={handleSubmit} className={styles.form}>\n            <label>Username:</label>\n              <input\n                type=\"text\"\n                required=\"required\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n\n            <label>Password:</label>\n              <input\n                type=\"password\"\n                required=\"required\"\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n              />\n\n            <label>Email:</label>\n              <input\n                type=\"email\"\n                value={email}\n                required=\"required\"\n                onChange={e => setEmail(e.target.value)}\n              />\n\n            <label>\n              Avatar Name:\n              </label>\n              <input\n                type=\"text\"\n                value={avatarName}\n                onChange={e => setAvatarName(e.target.value)}\n              />\n\n            <label>Photo:</label>\n            <input\n                type=\"text\"\n                value={photo}\n                onChange={e => setPhoto(e.target.value)}\n            />\n\n            <label>Description:</label>\n            <input\n                type=\"text\"\n                value={description}\n                onChange={e => setDescription(e.target.value)}\n            />\n\n            <input className={styles.buttonSubmit} type=\"submit\" value=\"Submit\" />\n          </form>\n        </div>\n      </Container>\n      <div className={styles.lineGrade} ></div>\n    </Jumbotron>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}