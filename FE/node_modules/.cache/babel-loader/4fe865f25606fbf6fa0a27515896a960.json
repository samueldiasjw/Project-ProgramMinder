{"ast":null,"code":"var _jsxFileName = \"/Users/samueldias/Desktop/MyProjectMindera/src/homepage/Components/CreateThread.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { Jumbotron, Container, Image } from \"react-bootstrap\";\nimport styles from \"../CSS/Posts.module.css\";\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport NotAccess from \"./NotAccess\";\nexport default function CreateThread() {\n  const {\n    id\n  } = useParams();\n  const [text, setText] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n\n  function sendThread(e) {\n    e.preventDefault();\n    console.log(text);\n    var postHeader = new Headers();\n    postHeader.append(\"Content-Type\", \"application/json\");\n    postHeader.append(\"Authorization\", document.cookie.split(\"token=\")[1]);\n    var raw = JSON.stringify({\n      \"title\": \"Primeira Thread!!!\",\n      \"post\": text,\n      \"userId\": 1,\n      \"categoryId\": id\n    });\n    var postRequestOptions = {\n      method: 'POST',\n      headers: postHeader,\n      body: raw,\n      redirect: 'follow'\n    };\n    fetch(\"http://localhost:8080/threads\", postRequestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\n  }\n\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    id: \"about\",\n    className: styles.Jumbotron,\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, document.cookie.split(\"token=\")[1] ? /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: styles.heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: styles.Us,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Create Thread\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.richtext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    required: \"required\",\n    value: \"{title}\",\n    style: {\n      backgroundColor: \"#3b3f48\",\n      border: \"1px solid #556177\",\n      borderRadius: \"4px\"\n    },\n    onChange: e => setTitle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(CKEditor, {\n    editor: ClassicEditor,\n    data: \"<p>Write your reply...</p>\",\n    onChange: (event, editor) => {\n      const data = editor.getData();\n      setText(data);\n    },\n    onFocus: (event, editor) => {\n      const data = editor.getData();\n\n      if (data === \"<p>Write your reply...</p>\") {\n        editor.setData(\"\");\n        setText(\"\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#\",\n    className: styles.createButton,\n    onClick: sendThread,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, \"+ Post\"))) : /*#__PURE__*/React.createElement(NotAccess, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 18\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.lineGrade,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/samueldias/Desktop/MyProjectMindera/src/homepage/Components/CreateThread.js"],"names":["React","useEffect","useState","useParams","Link","Jumbotron","Container","Image","styles","CKEditor","ClassicEditor","NotAccess","CreateThread","id","text","setText","title","setTitle","sendThread","e","preventDefault","console","log","postHeader","Headers","append","document","cookie","split","raw","JSON","stringify","postRequestOptions","method","headers","body","redirect","fetch","then","response","result","catch","error","card","heading","Us","richtext","backgroundColor","border","borderRadius","target","value","event","editor","data","getData","setData","createButton","lineGrade"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { Jumbotron, Container, Image} from \"react-bootstrap\";\nimport styles from \"../CSS/Posts.module.css\";\n\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n\nimport NotAccess from \"./NotAccess\"\n\n\nexport default function CreateThread() {\n  const { id } = useParams();\n  const [text, setText] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n\n  function sendThread(e) {\n    e.preventDefault();\n\n    console.log(text);\n\n    var postHeader = new Headers();\n    postHeader.append(\"Content-Type\", \"application/json\");\n    postHeader.append(\"Authorization\", document.cookie.split(\"token=\")[1]);\n    \n    var raw = JSON.stringify({\"title\":\"Primeira Thread!!!\",\"post\":text,\"userId\":1,\"categoryId\":id});\n    \n    var postRequestOptions = {\n      method: 'POST',\n      headers: postHeader,\n      body: raw,\n      redirect: 'follow'\n    };\n    \n    fetch(\"http://localhost:8080/threads\", postRequestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  }\n\n  return (\n    <Jumbotron id=\"about\" className={styles.Jumbotron} fluid>\n      <Container>\n        {document.cookie.split(\"token=\")[1] ?\n          <div className={styles.card}>\n          <h1 className={styles.heading}>\n            <span className={styles.Us}>Create Thread</span>\n          </h1>\n            <div className = {styles.richtext}>\n              <input\n                type=\"text\"\n                required=\"required\"\n                value=\"{title}\"\n                style={{ backgroundColor: \"#3b3f48\", border: \"1px solid #556177\", borderRadius: \"4px\" }}\n                onChange={e => setTitle(e.target.value)}\n              />\n              <CKEditor\n                      editor={ ClassicEditor }\n                      data=\"<p>Write your reply...</p>\"\n                      onChange={ ( event, editor ) => {\n                        const data = editor.getData();\n\n                        setText(data)\n                      } }\n                      onFocus={ ( event, editor ) => {\n                          const data = editor.getData();\n\n                          if(data === \"<p>Write your reply...</p>\"){\n                            editor.setData(\"\");\n                            setText(\"\")\n                          }\n                      } }\n              />\n              <a href = \"#\" className = {styles.createButton} onClick={sendThread}>\n                + Post\n              </a>\n            </div>\n        </div> : <NotAccess/>\n        }\n        \n      </Container>\n      <div className={styles.lineGrade} ></div>\n    </Jumbotron>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}